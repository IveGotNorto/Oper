// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package items

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD8ded6e2DecodeOperItems(in *jlexer.Lexer, out *URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "l":
			out.L = string(in.String())
		case "u":
			out.U = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8ded6e2EncodeOperItems(out *jwriter.Writer, in URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix[1:])
		out.String(string(in.L))
	}
	{
		const prefix string = ",\"u\":"
		out.RawString(prefix)
		out.String(string(in.U))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v URL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8ded6e2EncodeOperItems(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v URL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8ded6e2EncodeOperItems(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *URL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8ded6e2DecodeOperItems(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *URL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8ded6e2DecodeOperItems(l, v)
}
func easyjsonD8ded6e2DecodeOperItems1(in *jlexer.Lexer, out *Overview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "URLs":
			if in.IsNull() {
				in.Skip()
				out.URLs = nil
			} else {
				in.Delim('[')
				if out.URLs == nil {
					if !in.IsDelim(']') {
						out.URLs = make([]URL, 0, 2)
					} else {
						out.URLs = []URL{}
					}
				} else {
					out.URLs = (out.URLs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 URL
					(v1).UnmarshalEasyJSON(in)
					out.URLs = append(out.URLs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ainfo":
			out.Ainfo = string(in.String())
		case "pbe":
			out.Pbe = float64(in.Float64())
		case "pgrng":
			out.Pgrng = bool(in.Bool())
		case "ps":
			out.Ps = int(in.Int())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Tags = append(out.Tags, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		case "url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8ded6e2EncodeOperItems1(out *jwriter.Writer, in Overview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"URLs\":"
		out.RawString(prefix[1:])
		if in.URLs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.URLs {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ainfo\":"
		out.RawString(prefix)
		out.String(string(in.Ainfo))
	}
	{
		const prefix string = ",\"pbe\":"
		out.RawString(prefix)
		out.Float64(float64(in.Pbe))
	}
	{
		const prefix string = ",\"pgrng\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pgrng))
	}
	{
		const prefix string = ",\"ps\":"
		out.RawString(prefix)
		out.Int(int(in.Ps))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Tags {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Overview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8ded6e2EncodeOperItems1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Overview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8ded6e2EncodeOperItems1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Overview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8ded6e2DecodeOperItems1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Overview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8ded6e2DecodeOperItems1(l, v)
}
func easyjsonD8ded6e2DecodeOperItems2(in *jlexer.Lexer, out *Items) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Items, 0, 0)
			} else {
				*out = Items{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v7 Item
			(v7).UnmarshalEasyJSON(in)
			*out = append(*out, v7)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8ded6e2EncodeOperItems2(out *jwriter.Writer, in Items) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in {
			if v8 > 0 {
				out.RawByte(',')
			}
			(v9).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Items) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8ded6e2EncodeOperItems2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Items) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8ded6e2EncodeOperItems2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Items) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8ded6e2DecodeOperItems2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Items) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8ded6e2DecodeOperItems2(l, v)
}
func easyjsonD8ded6e2DecodeOperItems3(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "templateUuid":
			out.TemplateUuid = string(in.String())
		case "trashed":
			out.Trashed = string(in.String())
		case "createdAt":
			out.CreatedAt = string(in.String())
		case "updatedAt":
			out.UpdatedAt = string(in.String())
		case "changerUuid":
			out.ChangerUuid = string(in.String())
		case "itemVersion":
			out.ItemVersion = int(in.Int())
		case "vaultUuid":
			out.VaultUuid = string(in.String())
		case "overview":
			(out.Overview).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD8ded6e2EncodeOperItems3(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"templateUuid\":"
		out.RawString(prefix)
		out.String(string(in.TemplateUuid))
	}
	{
		const prefix string = ",\"trashed\":"
		out.RawString(prefix)
		out.String(string(in.Trashed))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updatedAt\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"changerUuid\":"
		out.RawString(prefix)
		out.String(string(in.ChangerUuid))
	}
	{
		const prefix string = ",\"itemVersion\":"
		out.RawString(prefix)
		out.Int(int(in.ItemVersion))
	}
	{
		const prefix string = ",\"vaultUuid\":"
		out.RawString(prefix)
		out.String(string(in.VaultUuid))
	}
	{
		const prefix string = ",\"overview\":"
		out.RawString(prefix)
		(in.Overview).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD8ded6e2EncodeOperItems3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD8ded6e2EncodeOperItems3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD8ded6e2DecodeOperItems3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD8ded6e2DecodeOperItems3(l, v)
}
