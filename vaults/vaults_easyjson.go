// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vaults

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	items "oper/items"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD5ee5d4fDecodeOperVaults(in *jlexer.Lexer, out *Vaults) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Vaults, 0, 1)
			} else {
				*out = Vaults{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Vault
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD5ee5d4fEncodeOperVaults(out *jwriter.Writer, in Vaults) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Vaults) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD5ee5d4fEncodeOperVaults(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vaults) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD5ee5d4fEncodeOperVaults(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vaults) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD5ee5d4fDecodeOperVaults(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vaults) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD5ee5d4fDecodeOperVaults(l, v)
}
func easyjsonD5ee5d4fDecodeOperVaults1(in *jlexer.Lexer, out *Vault) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uuid":
			out.Uuid = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "Items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				if out.Items == nil {
					out.Items = new(items.MapItems)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					*out.Items = make(items.MapItems)
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v4 *items.Item
						if in.IsNull() {
							in.Skip()
							v4 = nil
						} else {
							if v4 == nil {
								v4 = new(items.Item)
							}
							(*v4).UnmarshalEasyJSON(in)
						}
						(*out.Items)[key] = v4
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD5ee5d4fEncodeOperVaults1(out *jwriter.Writer, in Vault) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uuid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Uuid))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Items\":"
		out.RawString(prefix)
		if in.Items == nil {
			out.RawString("null")
		} else {
			if *in.Items == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v5First := true
				for v5Name, v5Value := range *in.Items {
					if v5First {
						v5First = false
					} else {
						out.RawByte(',')
					}
					out.String(string(v5Name))
					out.RawByte(':')
					if v5Value == nil {
						out.RawString("null")
					} else {
						(*v5Value).MarshalEasyJSON(out)
					}
				}
				out.RawByte('}')
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vault) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD5ee5d4fEncodeOperVaults1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vault) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD5ee5d4fEncodeOperVaults1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vault) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD5ee5d4fDecodeOperVaults1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vault) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD5ee5d4fDecodeOperVaults1(l, v)
}
